/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compiladores;

import compiladores.logger.Logger;
import compiladores.logger.Mensaje;
import compiladores.sintactico.Parser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JFileChooser;

/**
 *
 * @author marian2js
 */
public class CompiladorGUI extends javax.swing.JFrame {
    
    private String defaultFolderPath = System.getProperty("user.home");
    /**
     * Creates new form CompiladorGUI
     */
    public CompiladorGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Importar Código");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser(defaultFolderPath);
        int val = fileChooser.showDialog(this, "Abrir");
        if (val == JFileChooser.APPROVE_OPTION) {
        defaultFolderPath = fileChooser.getCurrentDirectory().getAbsolutePath();
        File file = fileChooser.getSelectedFile();
        try {
            FileReader fileReader = new FileReader(file.getAbsolutePath());
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            String codigo =  "";
            String line;

            // Limpiar datos ejecucion anterior
            jTextArea1.setText("");
            jTextArea2.setText("");
            Logger.getLog().borrarMensajes();

            int i = 0;
            while((line = bufferedReader.readLine()) != null) {
                if (!codigo.equals("")) {
                    codigo += '\n';
                    jTextArea1.append("\n");
                }
                codigo += line;
                jTextArea1.append("" + (++i) + ":   " + line);
            }
            bufferedReader.close();
            Parser parser = new Parser(file);
            parser.run();
            
            ArrayList<Mensaje> mensajes = Logger.getLog().getMensajes();
            for (Mensaje m : mensajes) {
                jTextArea2.append(m.getLevel() + "::[" + m.getTipo() + "] - Linea " + m.getLinea() + ": " + m.getMensaje() + "\n");
            }
            
            String resultado = "";
            int errores  = Logger.getLog().contarErrores();
            int warnings  = Logger.getLog().contarWarnings();
            if (errores > 0) {
                if (errores == 1) {
                    resultado = "Se encontro un error.";    
                } else {
                 resultado = "Se encontraron " + errores + " errores.";   
                }
            } else if (warnings > 0) {
                if (warnings == 1) {
                    resultado = "No hubo errores, pero se encontro un warning.";    
                } else {
                 resultado = "No hubo errores, pero se encontraron " + warnings + " warnings.";
                }
            } else {
                resultado = "El programa se ejecuto correctamente.";
            }
            jTextArea2.append("\n\nResultado de la ejecución: \n" + resultado + " \n\n");
            
            // Imprimir tabla de simbolos
            jTextArea2.append("Tabla de Simbolos:\n\n");
            TablaSimbolos ts = parser.getAnalizadorLexico().getTablaSimbolos();
            for (Token token : ts.getTokens()) {
                if (!token.esReservada()) {
                    jTextArea2.append("Token::[" + token.get("tipostr") + "] - " + '"' + token.getLexema() + "\"\n");
                }
            }
            
        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompiladorGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(CompiladorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompiladorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompiladorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompiladorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompiladorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompiladorGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
